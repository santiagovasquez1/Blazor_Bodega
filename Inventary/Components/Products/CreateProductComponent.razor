@using Entities
@using Bussines

@* Inyeccion de dependencias, llamado a clasese que nos ayudan *@
@inject NavigationManager NavManager
@inject B_Product BussinesProduct

<div>
    <EditForm Model="@Product">
        <div class="form-group">
            <label>Referencia:</label>
            <InputText @bind-Value="@Product.ProductId" class="form-control" />
        </div>
        <div class="form-group">
            <label>Nombre del producto:</label>
            <InputText @bin  d-Value="@Product.ProductName" class="form-control" />
        </div>
        <div class="form-group">
            <label>Descripción del producto:</label>
            <InputTextArea @bind-Value="@Product.ProductDescription" class="form-control" />
        </div>
        <div class="form-group">
            <label>Categoría:</label>
            <InputSelect @bind-Value="@Product.CategoryId" class="form-control">
                @foreach(var category in Categories)
                {
                    <option value="@category.CategoryId"> @category.CategoryName</option>
                }
            </InputSelect>
        </div>

        <input type="button" value="Agregar producto" @onclick="SaveProduct" class="but"/>
    </EditForm>
</div>

@code {
    ProductEntity Product = new ProductEntity();
    List<CategoryEntity> Categories=new List<CategoryEntity>();

    protected override async Task OnInitializedAsync()
    {
        Categories = B_Category.CategoryList();
    }

    private void SaveProduct()
    {
        BussinesProduct.CreateProduct(Product);
        NavManager.NavigateTo("product/list");
    }
}
